// Define Patient structure
STRUCT Patient
    STRING name
    STRING dateOfBirth
    STRING address
    STRING patientNumber
    STRING registeredDoctor
    LIST appointments // List of Appointment objects
END STRUCT

// Define Appointment structure
STRUCT Appointment
    STRING appointmentID
    STRING dateTime
    STRING doctor
    STRING status // e.g., "Booked", "Cancelled", "Completed"
    LIST prescriptions // List of prescriptions issued during the appointment
END STRUCT

// Define Receptionist structure
STRUCT Receptionist
    STRING name
END STRUCT

// Define Doctor structure
STRUCT Doctor
    STRING name
    LIST appointments // List of Appointment objects
END STRUCT

// Initialize lists
LIST patients = []
LIST doctors = []
LIST receptionists = []

// Function to generate a unique patient number
FUNCTION generateUniquePatientNumber()
    // Logic to generate a unique patient number (e.g., incrementing ID)
    RETURN uniquePatientNumber
END FUNCTION

// Function to generate a unique appointment ID
FUNCTION generateAppointmentID()
    // Logic to generate a unique appointment ID (e.g., incrementing ID)
    RETURN uniqueAppointmentID
END FUNCTION

// Function to register a new patient
FUNCTION registerPatient(name, dateOfBirth, address, registeredDoctor)
    patientNumber = generateUniquePatientNumber()
    newPatient = Patient(name, dateOfBirth, address, patientNumber, registeredDoctor, [])
    ADD newPatient TO patients
    RETURN patientNumber
END FUNCTION

// Function to find a patient by their unique number
FUNCTION findPatientByNumber(patientNumber)
    FOR each patient IN patients DO
        IF patient.patientNumber == patientNumber THEN
            RETURN patient
        END IF
    END FOR
    RETURN NULL // Patient not found
END FUNCTION

// Function to find a doctor by their name
FUNCTION findDoctorByName(doctorName)
    FOR each doctor IN doctors DO
        IF doctor.name == doctorName THEN
            RETURN doctor
        END IF
    END FOR
    RETURN NULL // Doctor not found
END FUNCTION

// Function to get available time slots for a specific doctor
FUNCTION getAvailableTimeSlots(doctor)
    // Logic to retrieve available time slots for the specified doctor
    RETURN availableSlots // List of available time slots
END FUNCTION

// Function to book an appointment
FUNCTION bookAppointment(patientNumber, requestedDoctor)
    patient = findPatientByNumber(patientNumber)
    availableSlots = getAvailableTimeSlots(requestedDoctor)

    IF availableSlots IS EMPTY THEN
        availableSlots = getAvailableTimeSlots(ANY_DOCTOR) // Check for any available doctor
    END IF

    IF availableSlots IS NOT EMPTY THEN
        selectedSlot = getUser SelectedSlot(availableSlots) // Assume user selects a slot
        appointment = Appointment(generateAppointmentID(), selectedSlot, requestedDoctor, "Booked", [])
        ADD appointment TO patient.appointments
        doctor = findDoctorByName(requestedDoctor)
        ADD appointment TO doctor.appointments
        RETURN appointment
    ELSE
        RETURN "No available slots"
    END IF
END FUNCTION

// Function to cancel an appointment
FUNCTION cancelAppointment(patientNumber, appointmentID)
    patient = findPatientByNumber(patientNumber)
    appointment = findAppointmentByID(patient, appointmentID)

    IF appointment IS NOT NULL THEN
        appointment.status = "Cancelled"
        RETURN "Appointment cancelled successfully"
    ELSE
        RETURN "Appointment not found"
    END IF
END FUNCTION

// Function to find an appointment by its ID
FUNCTION findAppointmentByID(patient, appointmentID)
    FOR each appointment IN patient.appointments DO
        IF appointment.appointmentID == appointmentID THEN
            RETURN appointment
        END IF
    END FOR
    RETURN NULL // Appointment not found
END FUNCTION

// Function to check in for an appointment
FUNCTION checkIn(patientNumber)
    patient = findPatientByNumber(patientNumber)
    currentAppointment = getCurrentAppointment(patient)

    IF currentAppointment IS NOT NULL AND currentAppointment.status == "Booked" THEN
        currentAppointment.status = "Checked In"
        RETURN "Check-in successful"
    ELSE
        RETURN "No booked appointment found"
    END IF
END FUNCTION

// Function to get the current appointment for the patient
FUNCTION getCurrentAppointment(patient)
    // Logic to find the current appointment based on the current time
    FOR each appointment IN patient.appointments DO
        IF appointment.status == "Booked" THEN
            RETURN appointment
        END IF
    END FOR
    RETURN NULL // No current appointment found
END FUNCTION

// Function to record appointment outcome and prescriptions
FUNCTION recordAppointmentOutcome(appointmentID, outcome, prescriptions)
    appointment = findAppointmentByID(patient, appointmentID)

    IF appointment IS NOT NULL THEN
        appointment.status = "Completed"
        appointment.prescriptions = prescriptions // Store the list of prescriptions
        RETURN "Appointment outcome recorded successfully"
    ELSE
        RETURN "Appointment not found"
    END IF
END FUNCTION

// Function to de-register a patient
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION
``` ```plaintext
// Function to handle patient de-registration
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        // Also remove appointments associated with the patient
        FOR each appointment IN patient.appointments DO
            appointment.status = "Cancelled" // Mark all appointments as cancelled
        END FOR
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to list all appointments for a patient
FUNCTION listPatientAppointments(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        RETURN patient.appointments // Return the list of appointments
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to update patient details
FUNCTION updatePatientDetails(patientNumber, newName, newDateOfBirth, newAddress)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        patient.name = newName
        patient.dateOfBirth = newDateOfBirth
        patient.address = newAddress
        RETURN "Patient details updated successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to retrieve all registered patients
FUNCTION getAllPatients()
    RETURN patients // Return the list of all registered patients
END FUNCTION

// Function to retrieve all registered doctors
FUNCTION getAllDoctors()
    RETURN doctors // Return the list of all registered doctors
END FUNCTION

// Function to add a new doctor
FUNCTION addDoctor(name)
    newDoctor = Doctor(name, [])
    ADD newDoctor TO doctors
    RETURN "Doctor added successfully"
END FUNCTION

// Function to remove a doctor
FUNCTION removeDoctor(doctorName)
    doctor = findDoctorByName(doctorName)

    IF doctor IS NOT NULL THEN
        REMOVE doctor FROM doctors
        RETURN "Doctor removed successfully"
    ELSE
        RETURN "Doctor not found"
    END IF
END FUNCTION
``` ```plaintext
// Function to handle patient de-registration
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        // Also remove appointments associated with the patient
        FOR each appointment IN patient.appointments DO
            appointment.status = "Cancelled" // Mark all appointments as cancelled
        END FOR
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to list all appointments for a patient
FUNCTION listPatientAppointments(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        RETURN patient.appointments // Return the list of appointments
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to update patient details
FUNCTION updatePatientDetails(patientNumber, newName, newDateOfBirth, newAddress)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        patient.name = newName
        patient.dateOfBirth = newDateOfBirth
        patient.address = newAddress
        RETURN "Patient details updated successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to retrieve all registered patients
FUNCTION getAllPatients()
    RETURN patients // Return the list of all registered patients
END FUNCTION

// Function to retrieve all registered doctors
FUNCTION getAllDoctors()
    RETURN doctors // Return the list of all registered doctors
END FUNCTION

// Function to add a new doctor
FUNCTION addDoctor(name)
    newDoctor = Doctor(name, [])
    ADD newDoctor TO doctors
    RETURN "Doctor added successfully"
END FUNCTION

// Function to remove a doctor
FUNCTION removeDoctor(doctorName)
    doctor = findDoctorByName(doctorName)

    IF doctor IS NOT NULL THEN
        REMOVE doctor FROM doctors
        RETURN "Doctor removed successfully"
    ELSE
        RETURN "Doctor not found"
    END IF
END FUNCTION
``` ```plaintext
// Function to handle patient de-registration
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        // Also remove appointments associated with the patient
        FOR each appointment IN patient.appointments DO
            appointment.status = "Cancelled" // Mark all appointments as cancelled
        END FOR
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to list all appointments for a patient
FUNCTION listPatientAppointments(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        RETURN patient.appointments // Return the list of appointments
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to update patient details
FUNCTION updatePatientDetails(patientNumber, newName, newDateOfBirth, newAddress)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        patient.name = newName
        patient.dateOfBirth = newDateOfBirth
        patient.address = newAddress
        RETURN "Patient details updated successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to retrieve all registered patients
FUNCTION getAllPatients()
    RETURN patients // Return the list of all registered patients
END FUNCTION

// Function to retrieve all registered doctors
FUNCTION getAllDoctors()
    RETURN doctors // Return the list of all registered doctors
END FUNCTION

// Function to add a new doctor
FUNCTION addDoctor(name)
    newDoctor = Doctor(name, [])
    ADD newDoctor TO doctors
    RETURN "Doctor added successfully"
END FUNCTION

// Function to remove a doctor
FUNCTION removeDoctor(doctorName)
    doctor = findDoctorByName(doctorName)

    IF doctor IS NOT NULL THEN
        REMOVE doctor FROM doctors
        RETURN "Doctor removed successfully"
    ELSE
        RETURN "Doctor not found"
    END IF
END FUNCTION
``` ```plaintext
// Function to handle patient de-registration
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        // Also remove appointments associated with the patient
        FOR each appointment IN patient.appointments DO
            appointment.status = "Cancelled" // Mark all appointments as cancelled
        END FOR
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to list all appointments for a patient
FUNCTION listPatientAppointments(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        RETURN patient.appointments // Return the list of appointments
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to update patient details
FUNCTION updatePatientDetails(patientNumber, newName, newDateOfBirth, newAddress)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        patient.name = newName
        patient.dateOfBirth = newDateOfBirth
        patient.address = newAddress
        RETURN "Patient details updated successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to retrieve all registered patients
FUNCTION getAllPatients()
    RETURN patients // Return the list of all registered patients
END FUNCTION

// Function to retrieve all registered doctors
FUNCTION getAllDoctors()
    RETURN doctors // Return the list of all registered doctors
END FUNCTION

// Function to add a new doctor
FUNCTION addDoctor(name)
    newDoctor = Doctor(name, [])
    ADD newDoctor TO doctors
    RETURN "Doctor added successfully"
END FUNCTION

// Function to remove a doctor
FUNCTION removeDoctor(doctorName)
    doctor = findDoctorByName(doctorName)

    IF doctor IS NOT NULL THEN
        REMOVE doctor FROM doctors
        RETURN "Doctor removed successfully"
    ELSE
        RETURN "Doctor not found"
    END IF
END FUNCTION
``` ```plaintext
// Function to handle patient de-registration
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        // Also remove appointments associated with the patient
        FOR each appointment IN patient.appointments DO
            appointment.status = "Cancelled" // Mark all appointments as cancelled
        END FOR
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to list all appointments for a patient
FUNCTION listPatientAppointments(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        RETURN patient.appointments // Return the list of appointments
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to update patient details
FUNCTION updatePatientDetails(patientNumber, newName, newDateOfBirth, newAddress)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        patient.name = newName
        patient.dateOfBirth = newDateOfBirth
        patient.address = newAddress
        RETURN "Patient details updated successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to retrieve all registered patients
FUNCTION getAllPatients()
    RETURN patients // Return the list of all registered patients
END FUNCTION

// Function to retrieve all registered doctors
FUNCTION getAllDoctors()
    RETURN doctors // Return the list of all registered doctors
END FUNCTION

// Function to add a new doctor
FUNCTION addDoctor(name)
    newDoctor = Doctor(name, [])
    ADD newDoctor TO doctors
    RETURN "Doctor added successfully"
END FUNCTION

// Function to remove a doctor
FUNCTION removeDoctor(doctorName)
    doctor = findDoctorByName(doctorName)

    IF doctor IS NOT NULL THEN
        REMOVE doctor FROM doctors
        RETURN "Doctor removed successfully"
    ELSE
        RETURN "Doctor not found"
    END IF
END FUNCTION
``` ```plaintext
// Function to handle patient de-registration
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        // Also remove appointments associated with the patient
        FOR each appointment IN patient.appointments DO
            appointment.status = "Cancelled" // Mark all appointments as cancelled
        END FOR
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to list all appointments for a patient
FUNCTION listPatientAppointments(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        RETURN patient.appointments // Return the list of appointments
    ELSE
        RETURN "Patient not found"
    END FUNCTION

// Function to update patient details
FUNCTION updatePatientDetails(patientNumber, newName, newDateOfBirth, newAddress)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        patient.name = newName
        patient.dateOfBirth = newDateOfBirth
        patient.address = newAddress
        RETURN "Patient details updated successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to retrieve all registered patients
FUNCTION getAllPatients()
    RETURN patients // Return the list of all registered patients
END FUNCTION

// Function to retrieve all registered doctors
FUNCTION getAllDoctors()
    RETURN doctors // Return the list of all registered doctors
END FUNCTION

// Function to add a new doctor
FUNCTION addDoctor(name)
    newDoctor = Doctor(name, [])
    ADD newDoctor TO doctors
    RETURN "Doctor added successfully"
END FUNCTION

// Function to remove a doctor
FUNCTION removeDoctor(doctorName)
    doctor = findDoctorByName(doctorName)

    IF doctor IS NOT NULL THEN
        REMOVE doctor FROM doctors
        RETURN "Doctor removed successfully"
    ELSE
        RETURN "Doctor not found"
    END IF
END FUNCTION
``` ```plaintext
// Function to handle patient de-registration
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        // Also remove appointments associated with the patient
        FOR each appointment IN patient.appointments DO
            appointment.status = "Cancelled" // Mark all appointments as cancelled
        END FOR
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to list all appointments for a patient
FUNCTION listPatientAppointments(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        RETURN patient.appointments // Return the list of appointments
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to update patient details
FUNCTION updatePatientDetails(patientNumber, newName, newDateOfBirth, newAddress)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        patient.name = newName
        patient.dateOfBirth = newDateOfBirth
        patient.address = newAddress
        RETURN "Patient details updated successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to retrieve all registered patients
FUNCTION getAllPatients()
    RETURN patients // Return the list of all registered patients
END FUNCTION

// Function to retrieve all registered doctors
FUNCTION getAllDoctors()
    RETURN doctors // Return the list of all registered doctors
END FUNCTION

// Function to add a new doctor
FUNCTION addDoctor(name)
    newDoctor = Doctor(name, [])
    ADD newDoctor TO doctors
    RETURN "Doctor added successfully"
END FUNCTION

// Function to remove a doctor
FUNCTION removeDoctor(doctorName)
    doctor = findDoctorByName(doctorName)

    IF doctor IS NOT NULL THEN
        REMOVE doctor FROM doctors
        RETURN "Doctor removed successfully"
    ELSE
        RETURN "Doctor not found"
    END IF
END FUNCTION
``````plaintext
// Function to handle patient de-registration
FUNCTION deregisterPatient(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        REMOVE patient FROM patients
        // Also remove appointments associated with the patient
        FOR each appointment IN patient.appointments DO
            appointment.status = "Cancelled" // Mark all appointments as cancelled
        END FOR
        RETURN "Patient de-registered successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to list all appointments for a patient
FUNCTION listPatientAppointments(patientNumber)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        RETURN patient.appointments // Return the list of appointments
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to update patient details
FUNCTION updatePatientDetails(patientNumber, newName, newDateOfBirth, newAddress)
    patient = findPatientByNumber(patientNumber)

    IF patient IS NOT NULL THEN
        patient.name = newName
        patient.dateOfBirth = newDateOfBirth
        patient.address = newAddress
        RETURN "Patient details updated successfully"
    ELSE
        RETURN "Patient not found"
    END IF
END FUNCTION

// Function to retrieve all registered patients
FUNCTION getAllPatients()
    RETURN patients // Return the list of all registered patients
END FUNCTION

// Function to retrieve all registered doctors
FUNCTION getAllDoctors()
    RETURN doctors // Return the list of all registered doctors
END FUNCTION

// Function to add a new doctor
FUNCTION addDoctor(name)
    newDoctor = Doctor(name, [])
    ADD newDoctor TO doctors
    RETURN "Doctor added successfully"
END FUNCTION

// Function to remove a doctor
FUNCTION removeDoctor(doctorName)
    doctor = findDoctorByName(doctorName)

    IF doctor IS NOT NULL THEN
        REMOVE doctor FROM doctors
        RETURN "Doctor removed successfully"
    ELSE
        RETURN "Doctor not found"
    END IF
END FUNCTION      
